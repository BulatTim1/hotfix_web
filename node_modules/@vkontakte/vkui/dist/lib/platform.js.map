{"version":3,"sources":["../../src/lib/platform.ts"],"names":["OS","ANDROID","IOS","platform","useragent","ua","canUseDOM","navigator","userAgent","test","osname","IS_PLATFORM_IOS","IS_PLATFORM_ANDROID"],"mappings":";;;;;;;;AAAA;;IAEYA,E;;;WAAAA,E;AAAAA,EAAAA,E;AAAAA,EAAAA,E;GAAAA,E,kBAAAA,E;;AAKL,IAAMC,OAAW,GAAGD,EAAE,CAACC,OAAvB;;AACA,IAAMC,GAAO,GAAGF,EAAE,CAACE,GAAnB;;;AAEA,SAASC,QAAT,CAAkBC,SAAlB,EAA0C;AAC/C,MAAMC,EAAE,GAAGD,SAAS,IAAKE,kBAAaC,SAAS,CAACC,SAArC,IAAmD,EAA9D;AAEA,SAAO,WAAWC,IAAX,CAAgBJ,EAAhB,IAAsBJ,OAAtB,GAAgCC,GAAvC;AACD,C,CAED;;AACA;;;;;;AAIA,IAAMQ,MAAM,GAAGP,QAAQ,EAAvB;AAEA;;;;AAGO,IAAMQ,eAAwB,GAAGD,MAAM,KAAKR,GAA5C;AACP;;;;;AAGO,IAAMU,mBAA4B,GAAGF,MAAM,KAAKT,OAAhD","sourcesContent":["import { canUseDOM } from './dom';\n\nexport enum OS {\n  ANDROID = 'android',\n  IOS = 'ios'\n}\n\nexport const ANDROID: OS = OS.ANDROID;\nexport const IOS: OS = OS.IOS;\n\nexport function platform(useragent?: string): OS {\n  const ua = useragent || (canUseDOM && navigator.userAgent) || '';\n\n  return /android/i.test(ua) ? ANDROID : IOS;\n}\n\n// @TODO выпилить в 3.0.0\n/**\n * @deprecated будет удалено в 3.0.0, так как для SSR нужно определять osname не один раз при запуске, а на каждый\n * запрос.\n */\nconst osname = platform();\n\n/**\n * @deprecated будет удалено в 3.0.0, используйте platform() === OS.IOS\n */\nexport const IS_PLATFORM_IOS: boolean = osname === IOS;\n/**\n * @deprecated будет удалено в 3.0.0, используйте platform() === OS.ANDROID\n */\nexport const IS_PLATFORM_ANDROID: boolean = osname === ANDROID;\n"],"file":"platform.js"}