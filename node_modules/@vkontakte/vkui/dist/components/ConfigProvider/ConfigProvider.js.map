{"version":3,"sources":["../../../src/components/ConfigProvider/ConfigProvider.tsx"],"names":["ConfigProvider","props","context","canUseDOM","document","window","body","setAttribute","scheme","prevProps","isWebView","webviewType","app","children","React","Component","PropTypes","bool","string","oneOf","vkConnect","object"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;IASqBA,c;;;;;AACnB,0BAAaC,KAAb,EAAoBC,OAApB,EAA6B;AAAA;;AAAA;AAC3B,oHAAMD,KAAN;;AACA,QAAIE,cAAJ,EAAe;AACb,OAACD,OAAO,CAACE,QAAR,IAAoBC,MAAM,CAACD,QAA5B,EAAsCE,IAAtC,CAA2CC,YAA3C,CAAwD,QAAxD,EAAkEN,KAAK,CAACO,MAAxE;AACD;;AAJ0B;AAK5B;;;;uCAuBkBC,S,EAAW;AAC5B,UAAIA,SAAS,CAACD,MAAV,KAAqB,KAAKP,KAAL,CAAWO,MAApC,EAA4C;AAC1C,aAAKJ,QAAL,CAAcE,IAAd,CAAmBC,YAAnB,CAAgC,QAAhC,EAA0C,KAAKN,KAAL,CAAWO,MAArD;AACD;AACF;;;sCAEsC;AACrC,aAAO;AACLE,QAAAA,SAAS,EAAE,KAAKT,KAAL,CAAWS,SADjB;AAELC,QAAAA,WAAW,EAAE,KAAKV,KAAL,CAAWU,WAFnB;AAGLH,QAAAA,MAAM,EAAE,KAAKP,KAAL,CAAWO,MAHd;AAILI,QAAAA,GAAG,EAAE,KAAKX,KAAL,CAAWW;AAJX,OAAP;AAMD;;;6BAEQ;AACP,aAAO,KAAKX,KAAL,CAAWY,QAAlB;AACD;;;wBArBc;AACb,aAAO,KAAKX,OAAL,CAAaE,QAAb,IAAyBC,MAAM,CAACD,QAAvC;AACD;;;EA3ByCU,eAAMC,S;;;8BAA7Bf,c,uBAQQ;AACzBU,EAAAA,SAAS,EAAEM,mBAAUC,IADI;AAEzBT,EAAAA,MAAM,EAAEQ,mBAAUE,MAFO;AAGzBP,EAAAA,WAAW,EAAEK,mBAAUG,KAAV,CAAgB,CAAC,QAAD,EAAW,UAAX,CAAhB,CAHY;AAIzBP,EAAAA,GAAG,EAAEI,mBAAUE;AAJU,C;8BARRlB,c,kBAeG;AACpBW,EAAAA,WAAW,EAAE,UADO;AAEpBD,EAAAA,SAAS,EAAEU,mBAAUV,SAAV,EAFS;AAGpBF,EAAAA,MAAM,EAAE;AAHY,C;8BAfHR,c,kBAqBG;AACpBI,EAAAA,QAAQ,EAAEY,mBAAUK;AADA,C","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport vkConnect from '@vkontakte/vk-connect';\nimport { HasChildren } from '../../types/props';\nimport { canUseDOM } from '../../lib/dom';\n\nexport interface ConfigProviderProps extends HasChildren {\n  scheme?: 'client_light' | 'client_dark' | 'bright_light' | 'space_gray',\n  isWebView?: boolean,\n  webviewType?: 'vkapps' | 'internal',\n  app?: string\n}\n\nexport default class ConfigProvider extends React.Component<ConfigProviderProps> {\n  constructor (props, context) {\n    super(props);\n    if (canUseDOM) {\n      (context.document || window.document).body.setAttribute('scheme', props.scheme);\n    }\n  }\n\n  static childContextTypes = {\n    isWebView: PropTypes.bool,\n    scheme: PropTypes.string,\n    webviewType: PropTypes.oneOf(['vkapps', 'internal']),\n    app: PropTypes.string\n  };\n\n  static defaultProps = {\n    webviewType: 'internal',\n    isWebView: vkConnect.isWebView(),\n    scheme: 'client_light'\n  };\n\n  static contextTypes = {\n    document: PropTypes.object\n  };\n\n  get document() {\n    return this.context.document || window.document;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.scheme !== this.props.scheme) {\n      this.document.body.setAttribute('scheme', this.props.scheme);\n    }\n  }\n\n  getChildContext(): ConfigProviderProps {\n    return {\n      isWebView: this.props.isWebView,\n      webviewType: this.props.webviewType,\n      scheme: this.props.scheme,\n      app: this.props.app\n    };\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n"],"file":"ConfigProvider.js"}