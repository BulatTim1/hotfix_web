{"version":3,"sources":["../../../src/lib/querystring.js"],"names":["querystring","parse","string","matches","exec","str","split","reduce","acc","item","param","decodeURIComponent","create","data","opts","options","encode","Object","keys","type","push","encodeURIComponent","Array","isArray","forEach","value","join"],"mappings":";;;;;;;AAAA;;;AAGA,IAAMA,WAAW,GAAG;AAClBC,EAAAA,KAAK,EAAE,iBAAiB;AAAA,QAAhBC,MAAgB,uEAAP,EAAO;AACtB,QAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC,OAAO,EAAP;AAEhC,QAAMC,OAAO,GAAG,YAAYC,IAAZ,CAAiBF,MAAjB,CAAhB;AACA,QAAMG,GAAG,GAAGF,OAAO,GAAGA,OAAO,CAAC,CAAD,CAAV,GAAgBD,MAAnC;AAEA,WAAOG,GAAG,CACPC,KADI,CACE,GADF,EAEJC,MAFI,CAEG,UAACC,GAAD,EAAMC,IAAN,EAAe;AACrB,UAAMC,KAAK,GAAGD,IAAI,CAACH,KAAL,CAAW,GAAX,CAAd;;AAEA,UAAII,KAAK,CAAC,CAAD,CAAT,EAAc;AACZF,QAAAA,GAAG,CAACE,KAAK,CAAC,CAAD,CAAN,CAAH,GAAgBC,kBAAkB,CAACD,KAAK,CAAC,CAAD,CAAN,CAAlC;AACD;;AAED,aAAOF,GAAP;AACD,KAVI,EAUF,EAVE,CAAP;AAWD,GAlBiB;AAmBlBI,EAAAA,MAAM,EAAE,kBAAqB;AAAA,QAApBC,IAAoB,uEAAb,EAAa;AAAA,QAATC,IAAS;AAC3B,QAAI,QAAOD,IAAP,MAAgB,QAAhB,IAA4BA,IAAI,KAAK,IAAzC,EAA+C,OAAO,EAAP;;AAE/C,QAAIE,OAAO;AAAKC,MAAAA,MAAM,EAAE;AAAb,OAAsBF,IAAtB,CAAX;;AAEA,WAAOG,MAAM,CAACC,IAAP,CAAYL,IAAZ,EAAkBN,MAAlB,CAAyB,UAACC,GAAD,EAAMC,IAAN,EAAe;AAC7C,UAAMU,IAAI,WAAUN,IAAI,CAACJ,IAAD,CAAd,CAAV;;AAEA,UAAIU,IAAI,KAAK,QAAT,IAAqBA,IAAI,KAAK,QAA9B,IAA0CA,IAAI,KAAK,SAAvD,EAAkE;AAChEX,QAAAA,GAAG,CAACY,IAAJ,CAASX,IAAI,GAAG,GAAP,IAAcM,OAAO,CAACC,MAAR,GAAiBK,kBAAkB,CAACR,IAAI,CAACJ,IAAD,CAAL,CAAnC,GAAkDI,IAAI,CAACJ,IAAD,CAApE,CAAT;AACD;;AAED,UAAIa,KAAK,CAACC,OAAN,CAAcV,IAAI,CAACJ,IAAD,CAAlB,CAAJ,EAA+B;AAC7BI,QAAAA,IAAI,CAACJ,IAAD,CAAJ,CAAWe,OAAX,CAAmB,UAAAC,KAAK,EAAI;AAC1BjB,UAAAA,GAAG,CAACY,IAAJ,CAASX,IAAI,GAAG,KAAP,IAAgBM,OAAO,CAACC,MAAR,GAAiBK,kBAAkB,CAACI,KAAD,CAAnC,GAA6CA,KAA7D,CAAT;AACD,SAFD;AAGD;;AAED,aAAOjB,GAAP;AACD,KAdM,EAcJ,EAdI,EAcAkB,IAdA,CAcK,GAdL,CAAP;AAeD;AAvCiB,CAApB;AA0CA,eAAe1B,WAAf","sourcesContent":["/**\n * @deprecated будет удален в версии 3.0.0\n */\nconst querystring = {\n  parse: (string = '') => {\n    if (typeof string !== 'string') return {};\n\n    const matches = /\\?(.+)$/ig.exec(string);\n    const str = matches ? matches[1] : string;\n\n    return str\n      .split('&')\n      .reduce((acc, item) => {\n        const param = item.split('=');\n\n        if (param[1]) {\n          acc[param[0]] = decodeURIComponent(param[1]);\n        }\n\n        return acc;\n      }, {});\n  },\n  create: (data = {}, opts) => {\n    if (typeof data !== 'object' || data === null) return '';\n\n    let options = { encode: true, ...opts };\n\n    return Object.keys(data).reduce((acc, item) => {\n      const type = typeof data[item];\n\n      if (type === 'string' || type === 'number' || type === 'boolean') {\n        acc.push(item + '=' + (options.encode ? encodeURIComponent(data[item]) : data[item]));\n      }\n\n      if (Array.isArray(data[item])) {\n        data[item].forEach(value => {\n          acc.push(item + '[]=' + (options.encode ? encodeURIComponent(value) : value));\n        });\n      }\n\n      return acc;\n    }, []).join('&');\n  }\n};\n\nexport default querystring;\n"],"file":"querystring.js"}